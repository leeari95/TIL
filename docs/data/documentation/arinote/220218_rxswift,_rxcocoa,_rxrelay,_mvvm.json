{"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"Ari's Notes"}],"title":"220218 RxSwift, RxCocoa, RxRelay, MVVM"},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","identifier":{"url":"doc:\/\/AriNote\/documentation\/AriNote\/220218_RxSwift,_RxCocoa,_RxRelay,_MVVM","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/AriNote\/documentation\/AriNote","doc:\/\/AriNote\/documentation\/AriNote\/Rx"]]},"sections":[],"variants":[{"paths":["\/documentation\/arinote\/220218_rxswift,_rxcocoa,_rxrelay,_mvvm"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"content":[{"text":"TIL (Today I Learned)","level":1,"anchor":"TIL-Today-I-Learned","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"2월 18일 (금)"}]},{"type":"heading","text":"학습 내용","level":2,"anchor":"%ED%95%99%EC%8A%B5-%EB%82%B4%EC%9A%A9"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"RxSwift","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Sugar API"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"RxCocoa"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"RxRelay","type":"text"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"MVVM 적용시켜보기"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":" "}]},{"type":"heading","text":"고민한 점 \/ 해결 방법","level":2,"anchor":"%EA%B3%A0%EB%AF%BC%ED%95%9C-%EC%A0%90--%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"[RxSwift - Sugar API]"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"간단한 생성 : ","type":"text"},{"code":"just","type":"codeVoice"},{"text":", ","type":"text"},{"code":"from","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"text":"필터링 : ","type":"text"},{"type":"codeVoice","code":"filter"},{"text":", ","type":"text"},{"code":"take","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"데이터 변형 : ","type":"text"},{"code":"map","type":"codeVoice"},{"type":"text","text":", "},{"code":"flatMap","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"그 외 : A Decision Tree of Observable Operators","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Marble Diagram","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"http:\/\/rxmarbles.com\/"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"http:\/\/reactivex.io\/documentation\/operators.html","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"https:\/\/itunes.apple.com\/us\/app\/rxmarbles\/id1087272442?mt=8","type":"text"}]}]}],"type":"unorderedList"}]}]},{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Sugar API는 기본사용법의 추가적인 귀찮은 것들을 없애주는 사용법이다.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"이러한 것들을 오퍼레이터라고 부른다."}]}],"style":"note"},{"text":"just","level":3,"type":"heading","anchor":"just"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"데이터를 하나만 전달할 때 간단히 사용할 수 있다.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/i.imgur.com\/bDymOxA.png","type":"image"}]},{"level":3,"type":"heading","anchor":"from","text":"from"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"데이터를 하나씩 여러개 전달하고 싶을 때 사용한다."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"그럼 next에 Hello 한번, World 두번 총 두개의 데이터가 차례대로 전달된다."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/lXZIWVC.png"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/Pts6L5X.png"}]},{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/i.imgur.com\/STrQA41.png","type":"image"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"subscribe에도 sugar가 존재한다.","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"이런식으로 단순 파라미터로도 전달받을 수 있다.","type":"text"}]}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"anchor":"observeOn","type":"heading","level":3,"text":"observeOn"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"메인 스레드에서 처리해야하는 UI작업은 DispatchQueue.main으로 감싸줘야하는데, 해당 작업을 생략하고 싶을 때 사용한다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"데이터를 중간에 바꾸는 sugar의 형태인데, 이런 것들을 operator라고 한다."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/ezu4nj3.png"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/xMyfsQH.png"}]},{"text":"map","type":"heading","anchor":"map","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"데이터를 중간에서 변형해주고 싶을 때 사용한다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"아래는 Int로 변형했다가 다시 String으로 변환하는 예제이다."}]}]}]},{"inlineContent":[{"identifier":"https:\/\/i.imgur.com\/fFQsQNo.png","type":"image"}],"type":"paragraph"},{"type":"heading","text":"filter","level":3,"anchor":"filter"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"조건을 걸어 json의 카운트가 0보다 클 경우에 아래 클로저를 마저 실행한다."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/BHsYbEV.png"}]},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"그 외 수많은 오퍼레이터들…."},{"type":"text","text":" "},{"type":"text","text":"https:\/\/reactivex.io\/documentation\/ko\/operators.html"}],"type":"paragraph"}],"name":"Note","style":"note"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"마블 다이어그램을 통해 설명되어있다."}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"ObserveOn","level":3,"anchor":"ObserveOn","type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Observable 유틸리티 오퍼레이터"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"스레드를 지정해주는 오퍼레이터이다."}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/u7M2N7r.png"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"ObserveOn을 하는 순간 줄의 색이 변경되는데, 이 줄은 스레드를 의미한다.","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"subscribeOn은 시작시점의 스레드에 영향을 주는 유틸리티"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"위치랑 상관없이 어디에 있든, 시작시점의 스레드를 전환해준다.","type":"text"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"위 그림을 참고해보면 다중 스레드 환경에서 스레드 간의 Observable을 전환하는 모습을 볼 수 있다.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/i.imgur.com\/N3aZ9Pa.png","type":"image"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"코드로 예시를 보자."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"subscribeOn으로 시작시점 스레드를 Concurrent으로 생성해주었다."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"그러면 map, filter, map의 작업들은 모두 Concurrent에서 이루어진다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"이후 observeOn이 호출이 되는데, 그 아래에 있는 subscribe의 클로저는 메인스레드에서 처리된다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"알파벳 순으로 정렬된 연산자의 리스트를 보면 어떤건 굵게 표시되어있는 경우가 있다.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/iFteEbO.png"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"굵게 표시된 것은 "},{"type":"codeVoice","code":"대표 기능 연산자"},{"type":"text","text":"이기 때문이다."}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":3,"text":"Merge","type":"heading","anchor":"Merge"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"여러개의 Observable을 묶어서 하나의 Observable로 만들어준다."}],"type":"paragraph"}]}]},{"inlineContent":[{"identifier":"https:\/\/i.imgur.com\/5UXT0A0.png","type":"image"}],"type":"paragraph"},{"level":3,"anchor":"Zip","type":"heading","text":"Zip"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"위 아래로 데이터가 하나씩 생성되면 그걸 쌍으로 만들어서 합쳐준다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"데이터가 생성되는 시점이 서로 달라도 알아서 쌍으로 만들어준다."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/i.imgur.com\/sjYe0mD.png","type":"image"}]},{"type":"heading","level":3,"text":"CombineLatest","anchor":"CombineLatest"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Zip과 다르게 짝이 안맞아도 된다. 가장 최근에 나온 데이터와 함께 쌍으로 만들어서 합쳐준다."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/vL8l4CS.png"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"코드 예제","type":"text"}]}],"name":"Note","style":"note","type":"aside"},{"inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/brz1tWB.png"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Observable을 두개 선언해주고 zip을 통해 쌍으로 묶어준다. 이후 클로저에는 두 쌍을 linebreak와 함께 병합해주고 있다."}],"type":"paragraph"}]}]},{"style":"note","type":"aside","content":[{"inlineContent":[{"text":"disposable을 활용하는 방법","type":"text"}],"type":"paragraph"}],"name":"Note"},{"inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/VwlIpHE.png"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"위 예제처럼 disposable이라는 프로퍼티를 만들어주고, viewWillDisappear가 호출되는 시점에 만약 다운로드를 받고있는 중이라면, 중간에 네트워킹을 취소시켜줄 수가 있다.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/QlqeOOb.png"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"또다른 응용 방법은 disposable을 배열로 선언하고, Observable을 subscribe을 해줄 때마다 생성되는 disposable을 append를 시켜주고, 나중에 반복문을 돌면서 취소시켜주는 방법도 있다.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 부분도 Sugar가 존재하는데, DisposeBag이라는 오퍼레이터가 있다."}]},{"level":3,"type":"heading","text":"DisposeBag","anchor":"DisposeBag"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"말 그대로 disposable을 담는 가방이다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"그리고 특별히 dispose()를 호출해주지 않아도 자동으로 작업을 취소시켜준다."}]}]},{"content":[{"inlineContent":[{"text":"insert를 호출해서 disposable을 추가해줄 수 있다.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/IUJfjh1.png"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이렇게 마지막에 disposed(by:) 를 호출해서 가방에 넣어주는 방법도 존재한다."}]},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"클로저와 메모리 해제 실험 중…"}],"type":"paragraph"}],"style":"note","name":"Note"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"self를 맘껏 사용하지만 메모리 해제가 잘 되는 예제를 만들어보자","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/JY8cyD4.png"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"뷰가 메모리에서 해제되는 시점에서 disposeBag도 같이 사라지지만, 참조카운트가 남아있다면 disposeBag이 사라지지 않는 경우도 존재한다.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"따라서 뷰가 사라질 때 dispose를 강제시키면 메모리 해제를 통제할 수 있게 된다."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"즉 순환참조도 예방할 수 있게 된다."}]}]}],"type":"unorderedList"},{"type":"thematicBreak"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"[RxSwift - 활용범위 넓히기, UI 컴포넌트와의 연동]","type":"text"}],"type":"strong"}]},{"anchor":"RxCocoa","text":"RxCocoa","type":"heading","level":2},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"RxSwift의 기능을 UiKit에 extension으로 추가한게 RxCocoa 라고 한다."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"뷰에 보여줄 ViewModel 타입을 만든다.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"그리고 뷰에 보여줄 데이터들을 모조리 ViewModel 타입안에 때려박는다.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"뷰컨트롤러에는 viewModel이라는 프로퍼티를 선언해준다.","type":"text"}],"type":"paragraph"}]}]}]}],"type":"unorderedList"},{"text":"Subject","level":3,"type":"heading","anchor":"Subject"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Observable은 값을 넘겨주는 역할을 하지, 값을 외부에서 받아들여서 넘겨주는 역할은 하지 않는다.  그래서 문제가 생겼는데… ‘Observable 처럼 값을 받아먹을 수는 있는 애인데, 외부에서 이 값을 컨트롤할 순 없을까?’ 그래서 나온 것이 Subject이다."}]}],"name":"Note","type":"aside"},{"items":[{"content":[{"inlineContent":[{"text":"Observable과 다르게 값을 받아먹을 수도 있지만, 외부에서 값을 통제할 수도 있다.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"총 4가지의 종류가 있다."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"AsyncSubject","type":"codeVoice"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"여러개가 구독을 하고 있더라도 다 안내려보내준다."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"그러다가 completes되는 시점에 가장 마지막에 있던 거를 모든 애들한태 다 내려주고 complete을 시킨다."}],"type":"paragraph"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"BehaviorSubject","type":"codeVoice"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"기본값을 가지고 시작한다."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"아직 데이터가 생성되지 않았을 때 누군가가 subscribe를 하자마자 기본값을 내려준다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"그리고 데이터가 생기면 그때마다 계속 내려준다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"새로운 게 중간에 subscribe를 하고나면 가장 최근에 발생했던 값을 일단 내려주고나서 그 다음부터 발생하는 데이터를 똑같이 모든 구독하는 애들한태 내려보내준다.","type":"text"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"PublishSubject","type":"codeVoice"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"subscribe를 하면 데이터를 그대로 내려보내준다.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"다른 subscribe가 또 새롭게 subscribe 할 수 있다. 그럼 또 데이터가 생성된다면 subscribe하고 있는 모든 관찰자한태 데이터를 내려준다."}],"type":"paragraph"}]}]}]},{"content":[{"inlineContent":[{"code":"ReplaySubject","type":"codeVoice"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"subscribe를 했을 때 그대로 순서대로 데이터를 내려보내준다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"두번째로 subscribe를 한다면 여태까지 발생했던 모든 데이터를 다 내려준다. 한꺼번에 Replay를 하는 것이다.","type":"text"}]}]}]}]}]}]}],"type":"unorderedList"},{"style":"note","name":"Note","content":[{"inlineContent":[{"text":"코드예제","type":"text"}],"type":"paragraph"}],"type":"aside"},{"type":"codeListing","syntax":"swift","code":["viewModel.totalPrice","    .scan(0, accumulator: +) \/\/ 0부터 시작해서 새로운 값이 들어오면 기존에 있던 값이랑 더한다.","    .map { $0.currencyKR() } \/\/ totalPrice를 가져와서 String으로 변환해주고","    .subscribe(onNext: {","        self.totalPrice.text = $0 \/\/ UI를 업데이트 한다.","    })","    .disposed(by: disposeBag) \/\/ 그리고 dispose 가방에 담는다."]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"이전에는 UI를 업데이트하는 메소드를 만들어서, 필요한 시점마다 호출시켜주어야 UI가 바뀌었다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"하지만 위와같이 맨처음 한번만 subscribe를 호출시켜도, subscribe를 한거에 의해서 값이 바뀔 때마다 UI를 업데이트 하도록 한다."}]}]}]},{"code":["class MenuListViewModel {","\/\/    var dummyMenus: [Menu] = [","\/\/        Menu(name: \"튀김1\", price: 100, count: 0),","\/\/        Menu(name: \"튀김2\", price: 100, count: 0),","\/\/        Menu(name: \"튀김3\", price: 100, count: 0),","\/\/        Menu(name: \"튀김4\", price: 100, count: 0),","\/\/        Menu(name: \"튀김5\", price: 100, count: 0),","\/\/        Menu(name: \"튀김6\", price: 100, count: 0)","\/\/    ]","    ","    \/\/    var itemsCount: Int = 5","    \/\/    var totalPrice: Int = 10_000","    \/\/    var totalPrice: PublishSubject<Int> = PublishSubject()","    \/\/ MARK: - 개선된 버전","    lazy var menuObservable = PublishSubject<[Menu]>()","    ","    lazy var itemsCount = menuObservable.map {","        $0.map { $0.count }.reduce(0, +)","    }","    lazy var totalPrice = menuObservable.map {","        $0.map { $0.price * $0.count }.reduce(0, +)","    }","    ","    init() {","        let dummyMenus: [Menu] = [","            Menu(name: \"튀김1\", price: 100, count: 0),","            Menu(name: \"튀김2\", price: 100, count: 0),","            Menu(name: \"튀김3\", price: 100, count: 0),","            Menu(name: \"튀김4\", price: 100, count: 0),","            Menu(name: \"튀김5\", price: 100, count: 0),","            Menu(name: \"튀김6\", price: 100, count: 0)","        ]","        ","        menuObservable.onNext(dummyMenus)","    }","}"],"type":"codeListing","syntax":"swift"},{"style":"note","type":"aside","name":"Note","content":[{"inlineContent":[{"text":"위 예제코드 설명","type":"text"}],"type":"paragraph"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"배열을 담고 있는 "},{"code":"PublishSubject","type":"codeVoice"},{"type":"text","text":"를 생성한다."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"외부로부터 배열이 주어지면 그때마다 Observable이 동작할 것이다."}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"itemsCount","type":"codeVoice"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"menuObservable를 바라보면서 뭔가 값이 바뀔 때마다 아이템의 총 합을 카운트로 내려보내주는 Observable이다.","type":"text"}]}]}],"type":"unorderedList"}]},{"content":[{"inlineContent":[{"code":"totalPrice","type":"codeVoice"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"menuObservable을 바라보면서 값이 바뀔 때마다 가격의 총합을 바꿔서 내려보내주는 Observable이다.","type":"text"}]}]}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"따라서 ViewController에서는 아래 코드를 딱 한번만 호출해주면 된다는 것이다."}]},{"syntax":"swift","code":["viewModel.itemsCount","    .map { \"\\($0)\" } \/\/ 문자열로 바까서","    .subscribe(onNext: { \/\/ 구독할게~~~","        self.itemCountLabel.text = $0 \/\/ 값이 바뀔 때마다 UI 업데이트 해라...","    })","    .disposed(by: disposeBag) \/\/ 가방에 담아두기"],"type":"codeListing"},{"type":"thematicBreak"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"[RxSwift를 활용한 아키텍처 - 프로젝트에 MVVM 적용해보기]"}],"type":"strong"}]},{"style":"note","content":[{"inlineContent":[{"text":"RxCocoa는 RxSwift 요소들을 UiKit을 extension하여 접목시킨 것이다.","type":"text"}],"type":"paragraph"}],"name":"Note","type":"aside"},{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/i.imgur.com\/LLsMZXh.png","type":"image"}]},{"items":[{"content":[{"inlineContent":[{"text":"이런 rx를 제공해준다.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Binder는 Bind를 시킬 수 있는데, subscribe를 하지 않고, binder를 넣어줄 수 있다."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/aBIS3B0.png"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"bind와 subscribe는 같은일을 하는거 같은데…?"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/BYS4xQI.png"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"그렇다. bind는 subscribe의 "},{"type":"codeVoice","code":"Sugar"},{"text":"다. 3줄에 걸쳐서 표현된 것이 1줄에 끝난다.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"bind를 사용하면 장점이 있는데, subscribe의 경우 순환참조를 방지하려면 weak self 키워드를 사용해야하는데, 반면에 bind를 사용하면 알아서 순환참조를 예방해준다."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/l8yu9Ur.png"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"이런 extension을 제공해주는 것이 RxCocoa이다.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"그리고 UI를 업데이트할 땐 메인스레드에서 안전하게 처리해주도록 ","type":"text"},{"code":"observeOn","type":"codeVoice"},{"text":"을 추가해주어야 한다.","type":"text"}]},{"inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/DAe1iiG.png"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"tableView 같은 경우에도 배열에 bind를 아래와 같이 추가해줄 수 있는데,"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"identifier":"https:\/\/i.imgur.com\/6K4NidU.png","type":"image"}],"type":"paragraph"},{"type":"codeListing","code":["viewModel.menuObservable","    .bind(to: tableView.rx.items(","        cellIdentifier: \"MenuItemTableViewCell\",","        cellType: MenuItemTableViewCell.self","    )) { index, item, cell in \/\/ 이 items라는 메소드가 dequeue를 대신 해준다고 보면 된다.","        cell.title.text = item.name","        cell.price.text = \"\\(item.price)\"","        cell.count.text = \"\\(item.count)\"","    }.disposed(by: disposeBag)"],"syntax":"swift"},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"이렇게 선언해주면 TableView의 DataSource는 필요없어지게 된다."}]}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"이후에 menuObservable을 "},{"code":"BehaviorSubject","type":"codeVoice"},{"text":"로 바꾸어 주어야 한다.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/20zu6Rx.png"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"이유는 PublishSubject 같은 경우 데이터가 바뀐다면 그때 데이터를 내려보내주기 때문에, 값을 먼저 할당해주고, TableView를 세팅해달라고 bind를 추가해도 값이 이미 할당되어있는 상태이기 때문에 UI가 초기에 설정되지 않는다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"따라서 가장 최근에 내려준 데이터를 내보내주는 BehaviorSubject로 바꾸어주어야 한다."}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"lazy var menuObservable = BehaviorSubject<[Menu]>(value: [])","type":"codeVoice"}]}]}],"type":"unorderedList"}]}]},{"inlineContent":[{"type":"text","text":"그리고 "},{"code":"onOrder","type":"codeVoice"},{"text":" 버튼에 아래와 같은 코드를 추가한다.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["viewModel.menuObservable.onNext([","    Menu(name: \"changed\", price: 100, count: 2)","])"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"menuObservable에 새로운 Menu 배열을 할당해주고 있다."},{"text":" ","type":"text"},{"text":"앞서 viewModel을 활용해서 UI를 업데이트 해달라는 bind를 해주었기 때문에 값만 수정해주어도 UI는 알아서 업데이트 된다.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"count에 2가 아니라 random으로 1…5까지 할당해놓고, 버튼을 계속 누르면 뷰가 계속 업데이트 되는 것을 확인해볼 수 있다.","type":"text"}]},{"inlineContent":[{"identifier":"https:\/\/i.imgur.com\/FmBncdh.gif","type":"image"}],"type":"paragraph"},{"type":"thematicBreak"},{"anchor":"MVVM","level":2,"text":"MVVM","type":"heading"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"View","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"뷰를 보여주기만 함. 화면을 그리기만 하고 아무 처리 하지않는다."}]}]}],"type":"unorderedList"}]},{"content":[{"inlineContent":[{"text":"ViewModel","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"어떤 데이터를 보여줘야하는지, 뷰에 대한 처리를 하는 로직이 들어간다.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"[상황]"}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"기획서가 나왔다. 서버는 서버대로, 디자인은 디자인대로, 클라이언트는 클라이언트 대로 각각 순차적으로 진행하는 것이 아니라 동시에 개발을 진행하는 것이다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"뷰는 뷰대로 기획서에 나와있는 모든 내용과 기능들을 Mock 데이터를 활용하여 개발을 하는거다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"그리고 뷰에 필요한 모델은 뷰모델로 따로 만드는 것이다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"나중에 실제로 서버에서 실제로 데이터가 나오면, 그걸 가지고 실제 모델을 만든다."}]}]},{"content":[{"inlineContent":[{"text":"우리 입장에서는 도메인에서 오는 모델이다.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"그 모델은 화면에 보여주는 모델하고는 다르다."}]}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"그래서 도메인에서 오는 모델을 뷰모델로 컨버팅하는 작업이 필요하다.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"뷰에서는 뷰에 필요한 뷰모델을 가지고 사용한다.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"[아키텍처로 이야기하는 ViewModel]","type":"text"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"MVC(모델-뷰-컨트롤러) : 보편적으로 많이 사용되는 소프트웨어 디자인 패턴"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Model : 데이터와 명령을 담당","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"View : 화면과 사용자 인터페이스를 담당"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Controller : 모델과 뷰 사이의 명령을 라우팅을 담당","type":"text"}]}]}]}]},{"content":[{"inlineContent":[{"type":"text","text":"MVC의 동작 : View에서 사용자가 입력 -> Controller가 입력을 받아 처리, Model을 변경하고 View가 나타냄"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Controller는 여러 개의 뷰를 가질 수 있음."}]}]}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"컨트롤러가 많은 부담을 가지고 있는 패턴, 그리고 View와 Model의 높은 의존성(View가 직접 Model을 보여주므르)","type":"text"}]}],"type":"aside","style":"note"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"MVP(모델-뷰-프레젠터) : MVC처럼 모델과 뷰는 동일하나 controller 대신 presenter를 사용하는 패턴"}]}]}]},{"items":[{"content":[{"inlineContent":[{"text":"Presenter: 뷰에서 요청한 정보로 Model을 가공하여 뷰에게 전달","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"UIViewController가 View로 포함 : 입력은 view가 받되 처리는 presenter에게 알려주는 것."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"View와 Model의 의존성을 줄여주므로 소프트웨어가 커졌을 때 유지보수가 용이해진다."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"View - Presenter는 1:1 관계이다. 대신 View-Presenter 사이의 의존성이 생긴다는 단점","type":"text"}],"type":"paragraph"}]}]}]}],"type":"unorderedList"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"MVVM(모델-뷰-뷰 모델) : MVC처럼 모델과 뷰는 동일하나 view model을 사용하는 패턴"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"view model : view를 표현하기 위해 만든 View를 위한 Model. View를 나타내기 위한 Model이자 View를 나타내기 위한 데이터 처리를 하는 부분"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"화면을 그리는 것은 완전히 view에게 할당하는 것."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"view로부터 입력 action을 받아 model에게 데이터를 요청 및 받은 데이터를 처리, view는 view model과 binding하여 데이터를 보여준다.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"view - view model은 1:1 관계, 의존성이 없어 독립성을 띄므로 유지보수 및 관리에 용이한 장점"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"type":"thematicBreak"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"[RxCocoa 추가 설명]"}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"UI 작업의 특징","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"text":"항상 메인스레드에서 처리해야 한다.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"그래서 "},{"type":"codeVoice","code":".observeOn(MainScheduler.instance)"},{"text":" 코드는 항상 들어가야한다.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"그리고 UI는 데이터를 처리하다가 중간에 에러가 나면 스트림이 끊어져버린다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"끊어진 스트림은 다시 재사용할 수 없다."}]}]},{"content":[{"inlineContent":[{"text":"스트림이 끊어지면 안되니까 아래 코드를 활용한다.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":".catchErrorJustReturn(\"\")"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"에러가 나면 빈 문자열을 내보내라는 뜻이다."}]}]}]}]},{"content":[{"inlineContent":[{"text":"UI에 대해서 처리하기 위해서는 항상 2줄이 필요하다.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/P21BEO2.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이게 번거로우니까 아래와 같은 drive가 나왔다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/VSNrbTl.png"}]},{"anchor":"RxRelay","level":2,"text":"RxRelay","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이렇게 뷰에 대한 스트림은 끊어지면 안되니까 이런것들이 나왔는데, subject도 끊어지지 않는 subject가 나왔다."}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Subject랑 동일하지만 에러가 나도 스트림이 끊어지지 않는다."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"에러가 나지 않으니 받아들일 수 밖에 없다. 그래서 데이터를 전달할 때 onNext로 전달하는 것이 아니라 accept로 전달한다."}],"type":"paragraph"}]}],"type":"unorderedList"},{"style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"Observable의 UI 전용으로 "},{"type":"codeVoice","code":"Driver"},{"text":" ","type":"text"},{"type":"text","text":"Subject의 UI 전용으로 "},{"type":"codeVoice","code":"Relay"},{"type":"text","text":" "},{"type":"image","identifier":"https:\/\/i.imgur.com\/ccabuVQ.png"}],"type":"paragraph"}],"name":"Note"},{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"스레드에 지연을 주는 방법","type":"text"},{"text":" ","type":"text"},{"type":"image","identifier":"https:\/\/i.imgur.com\/ovgQ8LK.png"},{"text":" ","type":"text"},{"code":".delay","type":"codeVoice"},{"type":"text","text":"를 주면 된다~"}]}],"style":"note"},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"3초 후에 딱 1번만 얼럿을 보여주게 하기"},{"type":"text","text":" "},{"type":"image","identifier":"https:\/\/i.imgur.com\/qH0646Z.png"}],"type":"paragraph"}],"type":"aside","style":"note"},{"type":"thematicBreak"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"참고링크"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"https:\/\/www.youtube.com\/watch?v=iHKBNYMWd5I"}]}]}]}]}],"type":"unorderedList"}],"kind":"content"}],"references":{"https://i.imgur.com/6K4NidU.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/6K4NidU.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/6K4NidU.png","traits":["1x","light"]}]},"https://i.imgur.com/STrQA41.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/STrQA41.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/STrQA41.png","traits":["1x","light"]}]},"https://i.imgur.com/20zu6Rx.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/20zu6Rx.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/20zu6Rx.png","traits":["1x","light"]}]},"https://i.imgur.com/ezu4nj3.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/ezu4nj3.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/ezu4nj3.png","traits":["1x","light"]}]},"https://i.imgur.com/qH0646Z.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/qH0646Z.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/qH0646Z.png","traits":["1x","light"]}]},"https://i.imgur.com/brz1tWB.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/brz1tWB.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/brz1tWB.png","traits":["1x","light"]}]},"https://i.imgur.com/BYS4xQI.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/BYS4xQI.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/BYS4xQI.png","traits":["1x","light"]}]},"https://i.imgur.com/N3aZ9Pa.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/N3aZ9Pa.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/N3aZ9Pa.png","traits":["1x","light"]}]},"https://i.imgur.com/QlqeOOb.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/QlqeOOb.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/QlqeOOb.png","traits":["1x","light"]}]},"https://i.imgur.com/iFteEbO.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/iFteEbO.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/iFteEbO.png","traits":["1x","light"]}]},"https://i.imgur.com/VwlIpHE.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/VwlIpHE.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/VwlIpHE.png","traits":["1x","light"]}]},"https://i.imgur.com/aBIS3B0.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/aBIS3B0.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/aBIS3B0.png","traits":["1x","light"]}]},"https://i.imgur.com/VSNrbTl.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/VSNrbTl.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/VSNrbTl.png","traits":["1x","light"]}]},"https://i.imgur.com/u7M2N7r.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/u7M2N7r.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/u7M2N7r.png","traits":["1x","light"]}]},"https://i.imgur.com/FmBncdh.gif":{"type":"image","identifier":"https:\/\/i.imgur.com\/FmBncdh.gif","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/FmBncdh.gif","traits":["1x","light"]}]},"https://i.imgur.com/DAe1iiG.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/DAe1iiG.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/DAe1iiG.png","traits":["1x","light"]}]},"https://i.imgur.com/sjYe0mD.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/sjYe0mD.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/sjYe0mD.png","traits":["1x","light"]}]},"doc://AriNote/documentation/AriNote/Rx":{"type":"topic","abstract":[{"type":"text","text":"RxSwift를 활용한 비동기 프로그래밍"}],"role":"collectionGroup","url":"\/documentation\/arinote\/rx","identifier":"doc:\/\/AriNote\/documentation\/AriNote\/Rx","title":"RxSwift","kind":"article"},"https://i.imgur.com/ccabuVQ.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/ccabuVQ.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/ccabuVQ.png","traits":["1x","light"]}]},"https://i.imgur.com/bDymOxA.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/bDymOxA.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/bDymOxA.png","traits":["1x","light"]}]},"https://i.imgur.com/fFQsQNo.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/fFQsQNo.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/fFQsQNo.png","traits":["1x","light"]}]},"https://i.imgur.com/xMyfsQH.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/xMyfsQH.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/xMyfsQH.png","traits":["1x","light"]}]},"https://i.imgur.com/IUJfjh1.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/IUJfjh1.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/IUJfjh1.png","traits":["1x","light"]}]},"https://i.imgur.com/ovgQ8LK.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/ovgQ8LK.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/ovgQ8LK.png","traits":["1x","light"]}]},"https://i.imgur.com/BHsYbEV.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/BHsYbEV.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/BHsYbEV.png","traits":["1x","light"]}]},"https://i.imgur.com/LLsMZXh.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/LLsMZXh.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/LLsMZXh.png","traits":["1x","light"]}]},"https://i.imgur.com/l8yu9Ur.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/l8yu9Ur.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/l8yu9Ur.png","traits":["1x","light"]}]},"https://i.imgur.com/lXZIWVC.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/lXZIWVC.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/lXZIWVC.png","traits":["1x","light"]}]},"https://i.imgur.com/Pts6L5X.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/Pts6L5X.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/Pts6L5X.png","traits":["1x","light"]}]},"https://i.imgur.com/JY8cyD4.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/JY8cyD4.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/JY8cyD4.png","traits":["1x","light"]}]},"https://i.imgur.com/5UXT0A0.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/5UXT0A0.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/5UXT0A0.png","traits":["1x","light"]}]},"doc://AriNote/documentation/AriNote":{"kind":"symbol","type":"topic","identifier":"doc:\/\/AriNote\/documentation\/AriNote","abstract":[{"type":"codeVoice","code":"Today I Learned"}],"url":"\/documentation\/arinote","title":"Ari's Notes","role":"collection"},"https://i.imgur.com/P21BEO2.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/P21BEO2.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/P21BEO2.png","traits":["1x","light"]}]},"https://i.imgur.com/vL8l4CS.png":{"type":"image","identifier":"https:\/\/i.imgur.com\/vL8l4CS.png","alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/vL8l4CS.png","traits":["1x","light"]}]}}}