{"primaryContentSections":[{"kind":"content","content":[{"text":"TIL(Today I Learned)","anchor":"TILToday-I-Learned","type":"heading","level":1},{"inlineContent":[{"text":"날짜: 2021년 8월 12일","type":"text"},{"text":" ","type":"text"},{"text":"작성자: 이아리","type":"text"},{"type":"text","text":" "},{"type":"text","text":"태그: ARC, call by reference, call by value, function, inout, 메모리, 메모리관리, 메모리구조, 참조타입"}],"type":"paragraph"},{"text":"학습내용","level":2,"anchor":"%ED%95%99%EC%8A%B5%EB%82%B4%EC%9A%A9","type":"heading"},{"inlineContent":[{"text":"오늘은 앞서 ARC를 배우기 전에 메모리 구조에 대해서 배워보았다. 눈으로만 보는 것 보다는 메모장에 메모해서 정리해가며 메모리 구조에 대한 여러 글들을 읽었다. 그리고 기존에는 몰랐던 사실을 알게 되었다. 스택과 힙은 같은 영역을 사용한다는 점이였다. 그리고 그 차이점에 대해서 더 상세히 학습한 것 같다! 이후 블로그에 글로 정리하여 포스팅하였고, ARC를 배워보려고 하였으나, 예시로 클래스, 구조체 등등이 나왔다. 아직 내가 배울 단계는 아닌 것 같기도 하고.. 이해하는데 있어서 조금 어려움이 있기도 하다. 완전히 이해하려면 일단 클래스의 개념부터 공부해야 가능할 것 같았다. 왜냐하면 ARC는 힙(Heap)영역 메모리를 관리해주는 녀석인데, 힙에는 참조 타입의 값들이 들어가기 때문이다. 참조 타입에는 클래스와 클로저가 들어간다. 예시로 클래스가 나오는데 이니셜라이저와 디이니셜라이저를 예시로 가르쳐준다. 아직 해당 개념에 대해서 찍먹만 해보고… 완벽하지 않기 때문에 나중에 클래스에 대해서 제대로 배우고 난 후 ARC를 다시 파봐야할 것 같다.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"그리고 야곰이 추천해준 ‘읽기 좋은 코드가 좋은 코드다’ 라는 책을 구매하여 오늘 배송받았다. 앞으로 시간날 때마다 틈틈히 읽어나가야겠다.","type":"text"}]},{"anchor":"%EC%98%A4%EB%8A%98%EC%9D%98-%EA%B8%80%EC%93%B0%EA%B8%B0","level":2,"type":"heading","text":"오늘의 글쓰기"},{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/leeari95.tistory.com\/15"}]},{"text":"복습내용 \/ inout이 뭔데?","anchor":"%EB%B3%B5%EC%8A%B5%EB%82%B4%EC%9A%A9--inout%EC%9D%B4-%EB%AD%94%EB%8D%B0","level":2,"type":"heading"},{"inlineContent":[{"text":"함수 inout parameter","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Swift는 기본적으로 ‘call by value’ 형식이다.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그래서 call by reference를 구현하려면 함수의 매개변수를 inout parameter로 구현해야한다."}]},{"type":"paragraph","inlineContent":[{"text":"함수의 매개변수는 기본적으로 상수(let)이다.","type":"text"}]},{"inlineContent":[{"type":"text","text":"함수는 값을 복사하여 내부에 전달하지만, inout 키워드를 사용하면 "},{"inlineContent":[{"type":"text","text":"참조"}],"type":"strong"},{"type":"text","text":"로 전달하게 된다."}],"type":"paragraph"},{"inlineContent":[{"text":"예를 들어 일반적인 함수를 만들어서 확인해보면,","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["var A = 3","var B = 9","func swapTwoTest(_ numbersOwn: Int, _ numbersTwo: Int) {","    \/\/ numbersOwn = 6 \/\/ Cannot assign to value: 'numbersOwn' is a 'let' constant","    \/\/ numbersTwo = 18 \/\/ Cannot assign to value: 'numbersTwo' is a 'let' constant","    var C = numbersOwn","    var D = numbersTwo","    C = 6","    D = 18","    print(C, D) \/\/ 6 18","}","swapTwoTest(A, B)","print(A, B) \/\/ 3 9"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"위 주석과 같이 매개변수가 상수라서 전달받은 값을 변경하려고 하면 값을 할당할수 없다고 나온다."}]},{"type":"paragraph","inlineContent":[{"text":"또한 다른 방법으로 값을 변수로 복사하여 변경하여도 원본에는 영향을 끼치지 않는다.","type":"text"}]},{"inlineContent":[{"type":"text","text":"함수 호출이 끝난 후에도 값이 변경되지 않고 그대로인 것을 확인할 수 있다."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"왜냐하면 값을 복사하여 함수에 넘겨주기 때문이다.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"하지만 inout 키워드를 사용하게 된다면?","type":"text"}]},{"code":["var A = 3","var B = 9","func swapTwoNumbers(_ numberOwn: inout Int,_ numberTwo: inout Int) { \/\/ 매개변수 타입 앞에 inout 키워드 추가","    let tmp = numberOwn","    numberOwn = numberTwo","    numberTwo = tmp","}","print(A, B) \/\/ 3 9","swapTwoNumbers(&A, &B) \/\/ 앰퍼샌드 '&'를 앞에 붙여줘야 한다.","print(A, B) \/\/ 9 3"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"매개변수가 더이상 원본을 복사한 값이 아니라 원본 변수 A의 ","type":"text"},{"inlineContent":[{"text":"참조","type":"text"}],"type":"strong"},{"type":"text","text":"를 전달한다."}]},{"type":"paragraph","inlineContent":[{"text":"그래서 함수 내부에서 원본을 수정할 수 있는 것이다.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"함수가 호출이 끝나도 함수 내부에서 변경한 값이 그대로인 것을 확인할 수 있다.","type":"text"}]},{"inlineContent":[{"type":"text","text":"이것을 ‘call by reference’ 라고 한다"}],"type":"paragraph"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/arinote\/210812_---_--"]}],"hierarchy":{"paths":[["doc:\/\/AriNote\/documentation\/AriNote","doc:\/\/AriNote\/documentation\/AriNote\/CS"]]},"metadata":{"title":"210812 메모리 구조","modules":[{"name":"Ari's Notes"}],"roleHeading":"Article","role":"article"},"kind":"article","sections":[],"identifier":{"url":"doc:\/\/AriNote\/documentation\/AriNote\/210812_---_--","interfaceLanguage":"swift"},"references":{"doc://AriNote/documentation/AriNote":{"kind":"symbol","type":"topic","identifier":"doc:\/\/AriNote\/documentation\/AriNote","abstract":[{"type":"codeVoice","code":"Today I Learned"}],"url":"\/documentation\/arinote","title":"Ari's Notes","role":"collection"},"https://leeari95.tistory.com/15":{"type":"link","title":"https:\/\/leeari95.tistory.com\/15","identifier":"https:\/\/leeari95.tistory.com\/15","titleInlineContent":[{"type":"text","text":"https:\/\/leeari95.tistory.com\/15"}],"url":"https:\/\/leeari95.tistory.com\/15"},"doc://AriNote/documentation/AriNote/CS":{"type":"topic","role":"collectionGroup","url":"\/documentation\/arinote\/cs","kind":"article","title":"CS","identifier":"doc:\/\/AriNote\/documentation\/AriNote\/CS","abstract":[{"type":"text","text":"Computer Science"}]}}}