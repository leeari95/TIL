{"primaryContentSections":[{"kind":"content","content":[{"anchor":"TIL-Today-I-Learned","level":1,"text":"TIL (Today I Learned)","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"날짜: 2021년 8월 5일","type":"text"},{"type":"text","text":" "},{"type":"text","text":"작성자: 이아리"},{"type":"text","text":" "},{"type":"text","text":"태그: API, UpperCamelCase, lowerCamelCase, 동사, 명사, 변수명, 함수명"}]},{"text":"학습내용","level":2,"type":"heading","anchor":"%ED%95%99%EC%8A%B5%EB%82%B4%EC%9A%A9"},{"type":"paragraph","inlineContent":[{"type":"text","text":"오늘은 캠프 1주차에서 다뤘었던 API Design Guidelines에 대해서 다시 한번 복습해보는 시간을 가졌다. 한번만 읽고 지나가는 것 보다는 정리해놓고 자주 훑어보는 것이 좋을 것 같다는 생각이 들었다. 평소 해당 개념에 대해서 꼼꼼하고 상세하게 다뤄보지 못한 것 같아 이번 기회에 상세히 알아보며 기본개념과 Naming에 대해서 정리해보기로 하였다."}]},{"type":"thematicBreak"},{"anchor":"Fundamentals-%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%85%90","text":"Fundamentals (기본개념)","type":"heading","level":2},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"가장 중요한 목표는 사용 시점에서의 명확성(Clarity)이다. 메소드, 속성같은 개체들을 이해하기 쉽고 간결하게 만드는데 중점을 두고 작성해야 한다."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"명확성(Clarity)은 간결성(brevity)보다 중요하다. 문자들 몇 개만 사용해서 적은 양의 코드를 작성하는 것이 목표가 아니다.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"모든 선언문에 문서화용 주석(documentation comments)을 작성해야한다. 문서를 작성하면서 얻는 인사이트가 자신의 설계에 깊은 영향을 줄 수 있으니 미루지 말자."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Xcode 자동완성에서 볼 수 있도록 마크 다운을 적극 활용하라."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"선언한 요소에 대해 설명하는 요약으로 시작하라. API설계에 대한 평가는 선언 부분과 요약만으로도 완벽하게 이해할 수 있다."}]}]}],"type":"orderedList"},{"type":"thematicBreak"},{"type":"heading","level":2,"text":"Naming (이름 짓기)","anchor":"Naming-%EC%9D%B4%EB%A6%84-%EC%A7%93%EA%B8%B0"},{"type":"paragraph","inlineContent":[{"text":"명확한 사용 활성화하기 (Promote Clear Usage)","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"그 이름을 사용하는 부분의 코드를 읽는 사람에게 혼란을 줄 수 있는 단어는 피하라."}],"type":"paragraph"}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["\/\/ [좋은 예]","extension List {","  public mutating func remove(at position: Index) -> Element","}","employees.remove(at: x)"]},{"inlineContent":[{"text":"메소드 시그니처에서 at을 생략한다면 해당 메소드가 x과 같은 요소를 제거하는 건지, x위체에 있는 요소를 찾아서 제거한다는 건지 헷갈릴 수 있다.","type":"text"}],"type":"paragraph"},{"code":["\/\/ [나쁜 예]","employees.remove(x) \/\/ unclear: are we removing x?"],"type":"codeListing","syntax":"swift"},{"type":"thematicBreak"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"불필요한 단어를 제거하라. 이름의 모든 단어는 사용자 관점에서 주요한 정보를 제공해야만 한다.","type":"text"}]}]}]},{"syntax":"swift","code":["\/\/ [나쁜 예]","public mutating func removeElement(member: Element) -> Element?","","allViews.removeElement(cancelButton)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"더 많은 단어를 사용하면 의도가 명확해지고 헷갈리지 않을 수 있지만 코드를 읽는 사람에게 중복된 정보를 제공하는 경우는 제거해야 한다. 위에 코드에서 element는 호출하는 지점에서는 의미가 없으니 다음과 같은 코드가 더 좋다.","type":"text"}]},{"type":"codeListing","code":["\/\/ [좋은 예]","public mutating func remove(member: Element) -> Element?","","allViews.remove(cancelButton) \/\/ clearer"],"syntax":"swift"},{"type":"thematicBreak"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"변수, 매개변수 연관타입은 선언한 타입이나 제약사항 보다는 역할에 맞는 이름을 갖도록 한다."}]}]}],"type":"unorderedList"},{"code":["\/\/ [나쁜 예]","var string = \"Hello\"","protocol ViewController {","  associatedtype ViewType : View","}","class ProductionLine {","  func restock(from widgetFactory: WidgetFactory)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"이처럼 타입이름을 반복해서 사용하는 것도 표현성이나 명료성은 헤치는 요소다. 대신 역할을 표현하는 이름이 더 좋다.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/[좋은 예]","var greeting = \"Hello\"","protocol ViewController {","  associatedtype ContentView : View","}","class ProductionLine {","  func restock(from supplier: WidgetFactory)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"연관 타입도 제네릭 타입 이름 뒤에 Type을 붙이는 것을 피하라."}]},{"code":["protocol Sequence {","  associatedtype IteratorType : Iterator","}"],"syntax":"swift","type":"codeListing"},{"type":"thematicBreak"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"매개변수 역할을 명확하게 넣어서 부족한 타입 정보를 보완하라. 매개변수 타입이 NSObject, Any, AnyObject 이거나 Int나 String 같은 기본 타입이면, 사용하는 지점에서 맥락상 타입 정보가 불명확할 수 있다.","type":"text"}]}]}]},{"code":["\/\/ [나쁜 예]","func add(observer: NSObject, for keyPath: String)","","grid.add(self, for: graphics) \/\/ 불분명함"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"명확성을 갖도록 부족한 타입 정보 마다 역할을 설명하는 명사를 붙여준다.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/ [좋은 예]","func addObserver(_ observer: NSObject, forKeyPath path: String)","grid.addObserver(self, forKeyPath: graphics) \/\/ 명확함"]},{"type":"thematicBreak"},{"text":"말하는 것처럼 술술 써지도록 작성하기(Strive for Fluent Usage)","anchor":"%EB%A7%90%ED%95%98%EB%8A%94-%EA%B2%83%EC%B2%98%EB%9F%BC-%EC%88%A0%EC%88%A0-%EC%8D%A8%EC%A7%80%EB%8F%84%EB%A1%9D-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0Strive-for-Fluent-Usage","level":3,"type":"heading"},{"items":[{"content":[{"inlineContent":[{"text":"메서드와 함수 이름을 사용할 때 영어 문장을 작성하는 것처럼 느끼도록 형태로 제공해라.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"codeListing","syntax":"swift","code":["\/\/ [좋은 예]","x.insert(y, at: z)          “x에서 z에다 y를 삽입”","x.subViews(havingColor: y)  “색상 y을 갖는 x의 subviews”","x.capitalizingNouns()       “x에 명사를 대문자화”"]},{"syntax":"swift","type":"codeListing","code":["\/\/ [나쁜 예]","x.insert(y, position: z)","x.subViews(color: y)","x.nounCapitalize()"]},{"syntax":"swift","code":["AudioUnit.instantiate(","  with: description, ","  options: [.inProcess], completionHandler: stopProgressBar)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"첫 번째나 두 번째 인자값 다음에 전달하는 값이 중요하지 않는 경우는 예외적으로 생략해도 된다.","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"팩토리 메서드 이름은 “make”로 시작하라."}],"type":"strong"},{"type":"text","text":" 예시) x.makeIterator()"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"초기화 메서드나 팩토리 메서드에서 첫번째 인자에 추가적인 설명을 포함하지 않도록 한다."}]},{"type":"text","text":" 예시) x.makeWidget(cogCount: 47)"}]}]}],"type":"unorderedList"},{"code":["\/\/ [좋은 예]","let foreground = Color(red: 32, green: 64, blue: 128)","let newPart = factory.makeWidget(gears: 42, spindles: 14)","let ref = Link(target: destination)"],"syntax":"swift","type":"codeListing"},{"syntax":"swift","type":"codeListing","code":["\/\/ [나쁜 예]","let foreground = Color(havingRGBValuesRed: 32, green: 64, andBlue: 128)","let newPart = factory.makeWidget(havingGearCount: 42, andSpindleCount: 14)","let ref = Link(to: destination)"]},{"type":"thematicBreak"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"함수나 메소드 이름은 부작용(side-effects) 여부에 따라 다르게 정한다","type":"text"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"부작용이 없는 경우는 명사형으로 작성한다. 예시) x.distance(to: y), i.successor()."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"부작용이 있는 경우에는 명령형으로 동사로 작성한다. 예시) print(x), x.sort(), x.append(y).","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"가변\/불변 메소드 이름을 함께 고려하라."}]}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"동사로 표현하면 자연스럽게","type":"text"}]},{"type":"text","text":" “ed”나 “ing”를 붙여서 불변 메소드 이름을 만들 수 있다."}],"type":"paragraph"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"가변(Mutating) x.sort(), x.append(y)"}],"type":"paragraph"}],"style":"note","name":"Note","type":"aside"},{"name":"Note","style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"불변(Nonmutating) z = x.sorted(), z = x.appending(y)"}],"type":"paragraph"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"(“ed”를 붙여서) 동사 과거형으로 불변성을 작성하기 적합한 경우"}]}]}]},{"code":["\/\/\/ Reverses `self` in-place.","mutating func reverse()","\/\/\/ Returns a reversed copy of `self`.","func reversed() -> Self","...","x.reverse()","let y = x.reversed()"],"type":"codeListing","syntax":"swift"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"목적어가 있어서 문법적으로 “ed”를 붙이기 어렵고, “ing”가 적합한 경우"}]}]}],"type":"unorderedList"},{"type":"codeListing","syntax":"swift","code":["\/\/ Strips all the newlines from `self`","mutating func stripNewlines()","\/\/\/ Returns a copy of `self` with all the newlines stripped.","func strippingNewlines() -> String","...","s.stripNewlines()","let oneLine = t.strippingNewlines()"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"동작을 명사로 표현하기 적합한 경우에는 가변 메소드 이름에 “form-“을 머릿말로 붙인다."}]}]}]},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"불변 x = y.union(z), j = c.successor(i)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"가변 y.formUnion(z), c.formSuccessor(&i)"}]}],"type":"aside","style":"note","name":"Note"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"불변으로 사용할 때 ","type":"text"},{"inlineContent":[{"type":"text","text":"부울린 메소드나 프로퍼티를 사용할 때는 리턴값을 받아서 단언 구문(Assertion)처럼 읽도록 한다."}],"type":"strong"},{"text":" 예시) x.isEmpty, line1.intersects(line2).","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"어떤 것을 표현하는 프로토콜은 명사처럼 읽도록 명시한다."}]},{"type":"text","text":" 예시) Collection"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"기능이나 가능성을 표현하는 프로토콜은 -able, -ible, -ing 등을 붙여서 표현한다."}]},{"text":" 예시) Equatable, ProgressReporting.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"그 외에 ","type":"text"},{"inlineContent":[{"type":"text","text":"상수, 변수, 속성, 타입들은 명사로 읽도록 명시한다."}],"type":"strong"}],"type":"paragraph"}]}]},{"type":"heading","level":2,"text":"용어를 잘 표현하라 (Use Terminology Well)","anchor":"%EC%9A%A9%EC%96%B4%EB%A5%BC-%EC%9E%98-%ED%91%9C%ED%98%84%ED%95%98%EB%9D%BC-Use-Terminology-Well"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"애매한 용어를 피하라."}],"type":"strong"},{"type":"text","text":" ’피부(skin)’를 ’표피(epidermis)’라고 하지말고, 더 쉽게 의미를 전달할 수 있는 표현이 있으면 그걸 선택하라. 전문 용어(Term of Art)는 필수적인 소통 도구지만, 사용하지 않을 경우 놓칠 수 있는 중요한 의미를 꼭 표현해야 하는 경우만 사용하세요."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"전문 용어를 사용한다면 ","type":"text"},{"inlineContent":[{"type":"text","text":"기존 의미에 맞춰 사용하라."}],"type":"strong"},{"type":"text","text":" 일반적인 용어가 애매하거나 불명확한 것을 정확하게 표현하기 위해서만 기술적인 용어를 사용하는 것이 좋다."}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"전문가를 놀라게 하지마라: 기존에 친숙하게 사용하던 용어에 전혀 새로운 의미를 부여한다면 선배들이 놀라거나 화를 낼지도 모른다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"초보자를 헷갈리게 하지마라: 웹에서 용어를 찾아 공부하는 사람들에게도 용어의 전형적인 의미가 중요하다."}]}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"축약어를 피하라."}]},{"type":"text","text":" 전문 용어면서 표준 형태가 아닌 약자는 잘못 풀어쓰거나 오해를 할 수 있다."}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"선례를 받아드려라.","type":"text"}]},{"type":"text","text":" 기존 문화에 맞춰진 표현은 왕초보를 위해서 줄이지마라."}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"연속된 데이터 구조 이름은 단순히 초보자가 이해하기에 List가 더 쉬울더라도 Array를 사용하는 게 좋다. 배열(Array)은 프로그래밍을 공부하는 모든 사람들이 공부하는 일반적인 용어라서, 검색하거나 질문을 할 때도 더 적합한 이름이라고 할 수 있다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"수학처럼 전문 영역에 대한 용어도 verticalPositionOnUnitCircleAtOriginOfEndOfRadiusWithAngle(x)보다 sin(x)처럼 폭넓게 사용하는 기존 선계를 지켜야한다. 비록 sine이 완전한 단어 표현이지만, 개발자나 수학자들은 sin(x)가 더 친숙하기 때문이다."}]}]}],"type":"unorderedList"}]}]},{"type":"thematicBreak"},{"anchor":"%EC%A0%95%EB%A6%AC","type":"heading","level":2,"text":"정리"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"코드를 읽을 때, 코드를 읽는 것처럼 느끼도록 하면 안된다. 문서를 읽는 것 처럼 읽혀야 한다.","type":"text"}],"type":"strong"}]},{"inlineContent":[{"type":"text","text":"변수는 명사, 함수는 동사"}],"type":"paragraph"},{"inlineContent":[{"text":"변수는 값을 담는 공간, 함수는 그 값들로 일을 한다.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"변수와 함수는 lowerCamelCase 클래스명은 UpperCamelCase"}]},{"type":"thematicBreak"},{"type":"paragraph","inlineContent":[{"type":"text","text":"lowerCamelCase : fuction, method, variable, constant"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ex.) someVariableName"}]},{"inlineContent":[{"text":"UpperCamelCase : type(class, struct, enum, extension…)","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"ex.) Person, Point, Week"}]},{"text":"공식문서 참고","level":2,"type":"heading","anchor":"%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C-%EC%B0%B8%EA%B3%A0"},{"inlineContent":[{"identifier":"https:\/\/minsone.github.io\/swift-internals\/api-design-guidelines\/","isActive":true,"type":"reference"}],"type":"paragraph"}]}],"variants":[{"paths":["\/documentation\/arinote\/210805_api_design_guidelines"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"article","hierarchy":{"paths":[["doc:\/\/AriNote\/documentation\/AriNote","doc:\/\/AriNote\/documentation\/AriNote\/Swift"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/AriNote\/documentation\/AriNote\/210805_API_Design_Guidelines"},"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"title":"210805 API Design Guidelines","role":"article","roleHeading":"Article","modules":[{"name":"Ari's Notes"}]},"references":{"doc://AriNote/documentation/AriNote":{"kind":"symbol","type":"topic","identifier":"doc:\/\/AriNote\/documentation\/AriNote","abstract":[{"type":"codeVoice","code":"Today I Learned"}],"url":"\/documentation\/arinote","title":"Ari's Notes","role":"collection"},"doc://AriNote/documentation/AriNote/Swift":{"identifier":"doc:\/\/AriNote\/documentation\/AriNote\/Swift","role":"collectionGroup","abstract":[{"type":"text","text":"언어 공부"}],"kind":"article","title":"Swift","url":"\/documentation\/arinote\/swift","type":"topic"},"https://minsone.github.io/swift-internals/api-design-guidelines/":{"title":"https:\/\/minsone.github.io\/swift-internals\/api-design-guidelines\/","identifier":"https:\/\/minsone.github.io\/swift-internals\/api-design-guidelines\/","type":"link","titleInlineContent":[{"text":"https:\/\/minsone.github.io\/swift-internals\/api-design-guidelines\/","type":"text"}],"url":"https:\/\/minsone.github.io\/swift-internals\/api-design-guidelines\/"}}}