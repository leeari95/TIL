{"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"content":[{"type":"heading","text":"TIL (Today I Learned)","anchor":"TIL-Today-I-Learned","level":1},{"inlineContent":[{"text":"10월 20일 (수)","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"%ED%95%99%EC%8A%B5-%EB%82%B4%EC%9A%A9","text":"학습 내용","level":2},{"type":"paragraph","inlineContent":[{"text":"오늘은 내일 활동학습을 위한 예습을 해보았다. Notification을 학습하는 과정중에 이해가 너무 안되서 예제코드를 찾아보면서 이해하려고 노력했다. KVO는 이전에 ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/leeari95\/TIL\/blob\/main\/2021-10\/211012%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%2C%20Properties%2C%20KeyPath%2C%20KVC%2C%20iOS%2C%20HIG.md","type":"reference"},{"text":"를 학습하면서 배웠던 내용이랑 비슷하여 어렵진 않았다.","type":"text"}]},{"inlineContent":[{"type":"text","text":" "}],"type":"paragraph"},{"level":3,"anchor":"KVO-Notification%EB%93%A4-%EA%B0%99%EC%9D%80-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0","type":"heading","text":"KVO, Notification들 같은 패턴을 사용하는 이유?"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"KVO와 Notification은 인스턴스 간의 통신을 하기 위한 수단이다. 통신을 한다는 것은 데이터, 정보를 주고받는 것이다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"하나의 객체가 다른 객체와 "},{"type":"strong","inlineContent":[{"type":"text","text":"소통"}]},{"text":"은 하지만 ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"묶이기(coupled)는 싫을 때"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"KVO"},{"text":", ","type":"text"},{"code":"Notification","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Observing"},{"text":" 등을 사용한다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"두 패턴 모두 특정 이벤트가 일어나면 원하는 객체에 알려주어 해당되는 처리를 하는 방법을 가지고 있다.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"어플리케이션의 특성상 객체간 소통은 필수적이다. 하지만 한 객체는 그 자체로 존재하면서 소통하고 싶을 뿐 다른 객체에 종속되어 동작하는 것은 ‘재사용성’과 ‘독립된 기능 요소’측면에서 볼 때 바람직하지 않다는 것이다."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"각 타입들끼리 의존하지 않고 서로 연결되지 않은 채 역할을 분담하는 것이 유지 보수와 수정에 용이하다.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":" "}],"type":"paragraph"},{"level":2,"type":"heading","text":"문제점 \/ 고민한 점","anchor":"%EB%AC%B8%EC%A0%9C%EC%A0%90--%EA%B3%A0%EB%AF%BC%ED%95%9C-%EC%A0%90"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"KVO는 알겠는데, Notification에 대한 이해가 어려웠다.","type":"text"},{"type":"text","text":" "},{"type":"text","text":" "}]}]}]},{"type":"heading","text":"해결방법","anchor":"%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95","level":2},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"직접 예제코드를 작성해보면서 이해해보았다."},{"type":"text","text":" "},{"type":"text","text":" "}],"type":"paragraph"}]}]},{"type":"heading","text":"공부내용 정리","anchor":"%EA%B3%B5%EB%B6%80%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC","level":2},{"inlineContent":[{"type":"text","text":"KVO는 A객체에서 B객체의 프로퍼티가 변화됨을 감지할 수 있는 패턴이다. Notification이 주로 Controller와 다른 객체 사이의 관계를 다룬다면 KVO는 객체와 객체 사이의 관계를 다루는데 적합하다. 메소드나 다른 액션에서 나타나는 것이 아니라 프로퍼티의 상태에 반응하는 형태이다."}],"type":"paragraph"},{"type":"heading","anchor":"%EC%9E%A5%EC%A0%90","text":"장점","level":1},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"두 객체 사이의 정보를 맞춰주는 것이 쉽다"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"New \/ old value를 쉽게 얻을 수 있다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"KeyPath로 옵저빙하기 때문에 nested objects도 옵저빙이 가능하다.","type":"text"}]}]}],"type":"unorderedList"},{"level":1,"text":"단점","type":"heading","anchor":"%EB%8B%A8%EC%A0%90"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"NSobject를 상속받는 객체에서만 사용이 가능하다."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"dealloc될 때 옵저버를 지워줘야 한다."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"많은 value를 감지할 때는 많은 조건문이 필요하다.","type":"text"}]}]}],"type":"unorderedList"},{"type":"thematicBreak"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"객체의 프로퍼티의 변경사항을 다른 객체에 알리기 위해 사용하는 코코아 프로그래밍 패턴","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Model과 View와 같이 논리적으로 분리된 파트간의 변경사항을 전달하는데 유용함"}]}]},{"content":[{"inlineContent":[{"text":"NSObject를 상속한 클래스에서만 KVO를 사용할 수 있다.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"thematicBreak"},{"text":"Observing을 위한 Setup","level":1,"type":"heading","anchor":"Observing%EC%9D%84-%EC%9C%84%ED%95%9C-Setup"},{"code":["class Person: NSObject {","    let name: String","    @objc dynamic var age: Int","    ","    init(name: String, age: Int) {","        self.name = name","        self.age = age","    }","}"],"type":"codeListing","syntax":"swift"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"age가 변경하는 걸 다른 객체에게 알리고 싶다면 위 예제처럼 NSObject 상속을 받아야한다.","type":"text"},{"text":" ","type":"text"},{"text":"SObject를 상속한 클래스에서만 KVO를 사용할 수 있기 때문이다.","type":"text"},{"text":" ","type":"text"},{"text":"상속을 해야하므로 class에서만 사용가능하다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"observe하려는 프로퍼티에 @objc attribute와 dynamic modifier를 추가해야한다.","type":"text"}]}]}],"type":"orderedList"},{"type":"thematicBreak"},{"type":"heading","level":1,"text":"Observer 정의","anchor":"Observer-%EC%A0%95%EC%9D%98"},{"inlineContent":[{"type":"text","text":"KeyPath를 사용하여 프로퍼티 KeyPath에 observer를 추가할 수 있다."}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"관찰자 클래스의 인스턴스는 하나 이상의 속성에 대한 변경사항에 대한 정보를 관리한다.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"관찰자를 만들 때 관찰하려는 속성을 참조하는 키 경로로 메서드를 호출하여 관찰을 시작한다.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"syntax":"swift","code":["var person = Person(name: \"ari\", age: 20)","","person.observe(\\.age , options: [.old, .new]) { (object, change) in","    print(\"갑자기 \\(object.name)의 나이(\\(change.oldValue!))가 \\(change.newValue!)살이 되어버렸다...\")","}","person.age = 24 \/\/ 갑자기 ari의 나이(20)가 24살이 되어버렸다...","person.age = 27 \/\/갑자기 ari의 나이(24)가 27살이 되어버렸다..."],"type":"codeListing"},{"type":"heading","text":"프로퍼티 옵저버와 다른점이 뭘까?","anchor":"%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%98%B5%EC%A0%80%EB%B2%84%EC%99%80-%EB%8B%A4%EB%A5%B8%EC%A0%90%EC%9D%B4-%EB%AD%98%EA%B9%8C","level":2},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"프로퍼티 옵저버는 타입 정의 내부에 위치"},{"type":"text","text":" "},{"type":"text","text":"KVO는 타입 정의 외부에서 observer를 추가할 때 사용"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"싱글턴 객체중 하나이므로 이벤트들의 발생 여부를 옵저버를 등록한 객체들에게 Notification을 post하는 방식으로 사용한다. Notification Name이라는 Key 값을 통해 보내고 받을 수 있다.","type":"text"}]},{"text":"장점","type":"heading","level":1,"anchor":"%EC%9E%A5%EC%A0%90"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"많은 줄의 코드가 필요없이 쉽게 구현이 가능하다.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"다수의 객체들에게 동시에 이벤트의 발생을 알려줄 수 있다.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Notification과 관련된 정보를 Any? 타입의 object, [AnyHashable : Any]? 타입의 userInfo로 전달할 수 있다."}]}]}]},{"level":1,"anchor":"%EB%8B%A8%EC%A0%90","text":"단점","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"key 값으로 Notification의 이름과 userInfo를 서로 맞추기 때문에 컴파일시 구독이 잘 되고 있는지, 올바르게 userInfo의 value를 받아오는지 체크가 불가능 하다"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"추적이 쉽지 않을 수도 있다"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Notification post 이후 정보를 받을 수 없다.","type":"text"}]}]}],"type":"unorderedList"},{"type":"thematicBreak"},{"text":"Notification","anchor":"Notification","type":"heading","level":1},{"inlineContent":[{"text":"NotificationCenter를 통해 정보를 저장하기 위한 구조체다.","type":"text"},{"type":"text","text":" "},{"text":"옵저버들에게 전달되는 구조체로 정보가 담겨있고, 해당 알림을 등록한 옵저버에게만 전달된다. 구조체는 아래와 같이 구성되어 있다.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["var name: Notification.Name","var object: Any?","userInfo: [AnyHashable : Any]?"],"type":"codeListing"},{"level":3,"anchor":"name","type":"heading","text":"name"},{"type":"paragraph","inlineContent":[{"type":"text","text":"전달하고자 하는 notification의 이름 (이걸 통해 알림을 식별한다)"}]},{"text":"object","level":3,"anchor":"object","type":"heading"},{"inlineContent":[{"type":"text","text":"발송자가 옵저버에게 보내려고 하는 객체. 주로 발송자 객체를 전달하는 데 쓰임"}],"type":"paragraph"},{"text":"userInfo","level":3,"anchor":"userInfo","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"notification과 관련된 값 또는 객체의 저장소. Extra data를 보내는데 사용 가능"}]},{"inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/G0xAvnT.png"},{"type":"text","text":" "},{"text":"notification이 오면 observer pattern을 통해서 등록된 옵저버들에게 notification을 전달하기 위해 사용하는 클래스.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"notification을 발송하면 NotificationCenter에서 메세지를 전달한 observer를 처리할 때까지 대기한다."},{"type":"text","text":" "},{"text":"즉, 흐름이 동기적으로 흘러간다.","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"otification Center를 통해서 앱의 한 파트에서 다른 파트로 데이터를 전달할 수 있다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Notification이 오면 등록된 observer list를 스캔한다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Notification Center는 어플리케이션 어느 곳에서 어느 객체와도 상호작용을 할 수 있다."}]}]}]},{"type":"heading","level":2,"anchor":"%EC%83%81%ED%98%B8-%EC%9E%91%EC%9A%A9%EC%9D%84-%ED%95%98%EA%B8%B0-%EC%A0%84%EC%97%90-extension%EC%9C%BC%EB%A1%9C-NotificationName%EC%9D%84-%EC%B6%94%EA%B0%80%ED%95%B4%EC%A3%BC%EB%A9%B4-%ED%8E%B8%EB%A6%AC%ED%95%98%EB%8B%A4","text":"상호 작용을 하기 전에 extension으로 Notification.Name을 추가해주면 편리하다."},{"syntax":"swift","code":["\/\/ Notification Name 설정","extension Notification.Name {","    static let secret = Notification.Name(\"Shh\")","}"],"type":"codeListing"},{"inlineContent":[{"text":"NotificationCenter로 Post하기 (발송하기)","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Post가 핵심이다. Name의 해당자들에게 일을 수행하라고 시킨다."}],"type":"paragraph"},{"code":["\/\/ 노티피케이션 발송","NotificationCenter.default.post(name: Notification.Name.secret, object: nil, userInfo: [NotificationKey.password: \"암호는 !@#$\"])"],"type":"codeListing","syntax":"swift"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"name","type":"text"},{"type":"text","text":" "},{"type":"text","text":"전달하고자 하는 notification의 이름 (이걸 통해 알림을 식별)"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"object"},{"text":" ","type":"text"},{"type":"text","text":"addObserver의 object 부분과 목적이 동일한데, 특정 sender의 notification만 받고 싶은 경우 작성 해주면 된다. filter 기능과 같다고 생각하면 될 것 같다. 없으면 nil"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"userInfo"},{"text":" ","type":"text"},{"type":"text","text":"notification과 관련된 값이다. extra data를 보내는데 사용한다."}]}]}],"type":"unorderedList"},{"type":"heading","level":1,"text":"Notification Center에 Observer 등록하기","anchor":"Notification-Center%EC%97%90-Observer-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"notification을 observe 해주기 전에 Notification Center에 ","type":"text"},{"code":"addObserver","type":"codeVoice"},{"type":"text","text":" 과정을 무조건 먼저 거쳐줘야 원하는 신호를 관찰 가능하니까 주의하도록 하자."}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"addObserver"},{"type":"text","text":"가 있으면 "},{"code":"removeObserver(_:name:object:)","type":"codeVoice"},{"type":"text","text":"도 있는데 방식은 같다."}],"type":"paragraph"}]}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Notification Name 설정","NotificationCenter.default.addObserver(self, selector: #selector(answerToMaster(notification:)), name: Notification.Name.secret, object: nil)","","@objc func answerToMaster(notification: Notification) {","    \/\/ notification.userInfo 값을 받아온다.","    guard let key = notification.userInfo?[NotificationKey.password] as? String else {","        return","    }","    print(\"\\(name): \\(key)\")","}"]},{"type":"heading","level":1,"anchor":"NotificationCenter%EB%8A%94-%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%A0%EA%B9%8C","text":"NotificationCenter는 언제 사용해야할까?"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"앱 내에서 공식적인 연결이 없는 두 개 이상의 컴포넌트들이 상호작용이 필요할 때"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"상호작용이 반복적으로 그리고 지속적으로 이루어져야 할 때"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"일대다 또는 다대다 통신을 사용하는 경우"}]}]}],"type":"unorderedList"},{"type":"thematicBreak"},{"level":1,"text":"예제 코드 풀버전","type":"heading","anchor":"%EC%98%88%EC%A0%9C-%EC%BD%94%EB%93%9C-%ED%92%80%EB%B2%84%EC%A0%84"},{"syntax":"swift","type":"codeListing","code":["\/\/ Notification Name 설정","extension Notification.Name {","    static let secret = Notification.Name(\"Shh\")","}","","\/\/ Notification과 관련된 인스턴스","enum NotificationKey {","    case password","}","","class Master {","    func callPassword() {","        print(\"마스터: 벽면에 쓰여있는 암호를 읊어봐.\")","        \/\/ NotificationCenter로 Post하기 (발송하기)","        NotificationCenter.default.post(name: Notification.Name.secret, object: nil, userInfo: [NotificationKey.password: \"!@#$\"])","    }","}","","class Friend {","    let name: String","    ","    init(name: String) {","        self.name = name","        \/\/ NotificationCenter에 Observer 등록하기","        NotificationCenter.default.addObserver(self, selector: #selector(answerToMaster(notification:)), name: Notification.Name.secret, object: nil)","    }","    @objc func answerToMaster(notification: Notification) {","        \/\/ notification.userInfo 값을 받아온다.","        guard let object = notification.userInfo?[NotificationKey.password] as? String else {","            return","        }","        print(\"\\(name): 암호는 \\(object)\")","    }","}","","let master = Master()","","\/\/ 관찰자들 (observer)","let ariOwn = Friend(name: \"아리랑\")","let ariTwo = Friend(name: \"쓰리랑\")","let ariThree = Friend(name: \"아라리오\")","","\/\/ observer들에게 일을 수행하라고 시킨다","master.callPassword()","\/*","마스터: 벽면에 쓰여있는 암호를 읊어봐.","아리랑: 암호는 !@#$","쓰리랑: 암호는 !@#$","아라리오: 암호는 !@#$","\/*"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Delegate는 보통 Protocol을 정의하여 사용된다. Protocol이란 일종의 기능 명세서 같은 것으로 Delefate로 지정된 객체가 해야하는 메소드들의 원형을 적어놓는다. Delegate 역할을 하려는 객체는 이 Protocol을 따르며 원형만 있던 메소드들의 구현을 한다. 이렇게 세팅 후 이전 객체는 어떤 이벤트가 일어났을 시 Delegate로 지정한 객체에 알려줄 수 있다."}]},{"text":"장점","level":1,"type":"heading","anchor":"%EC%9E%A5%EC%A0%90"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"매우 엄격한 Syntax로 인해 프로토콜에 필요한 메서드들이 명확하게 명시된다."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"컴파일 시 경고나 에러가 떠서 프로토콜의 구현되지 않은 메소드들을 알려준다","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"로직의 흐름을 따라가기 쉽다","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"프로토콜 메소드로 알려주는 것 뿐만 아니라 정보를 받을 수 있다.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"커뮤니케이션 과정을 유지하고 모니터링하는 제 3의 객체가 필요없다. (NotificationCenter같은 외부 객체)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"프로토콜이 컨트롤러의 범위 안에서 정의된다."}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"%EB%8B%A8%EC%A0%90","text":"단점","type":"heading","level":1},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"많은 줄의 코드가 필요하다","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"delegate 설정에 nil이 들어가지 않게 주의해야한다. 크래시를 일으킬 수 있다."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"많은 객체들에게 이벤트를 알려주는 것이 어렵고 비효율적이다. (가능은 하다.)"}],"type":"paragraph"}]}]},{"type":"thematicBreak"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"참고링크","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/cocoa_design_patterns\/using_key-value_observing_in_swift","type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nskeyvalueobservingoptions","isActive":true,"type":"reference"}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/notification","type":"reference","isActive":true}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/notificationcenter","isActive":true}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/medium.com\/@Alpaca_iOSStudy\/delegation-notification-%EA%B7%B8%EB%A6%AC%EA%B3%A0-kvo-82de909bd29","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/zeddios.tistory.com\/1220","type":"reference"}]}]}]}]}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/AriNote\/documentation\/AriNote","doc:\/\/AriNote\/documentation\/AriNote\/Swift"]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/AriNote\/documentation\/AriNote\/211020_KVC,_Notification,_NotificationCenter"},"metadata":{"role":"article","modules":[{"name":"Ari's Notes"}],"roleHeading":"Article","title":"211020 KVC, Notification, NotificationCenter"},"kind":"article","variants":[{"paths":["\/documentation\/arinote\/211020_kvc,_notification,_notificationcenter"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"https://developer.apple.com/documentation/foundation/nskeyvalueobservingoptions":{"title":"KVO Option","url":"https:\/\/developer.apple.com\/documentation\/foundation\/nskeyvalueobservingoptions","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/nskeyvalueobservingoptions","type":"link","titleInlineContent":[{"text":"KVO Option","type":"text"}]},"https://zeddios.tistory.com/1220":{"title":"Blog - KVO","url":"https:\/\/zeddios.tistory.com\/1220","identifier":"https:\/\/zeddios.tistory.com\/1220","type":"link","titleInlineContent":[{"text":"Blog - KVO","type":"text"}]},"doc://AriNote/documentation/AriNote":{"kind":"symbol","type":"topic","identifier":"doc:\/\/AriNote\/documentation\/AriNote","abstract":[{"type":"codeVoice","code":"Today I Learned"}],"url":"\/documentation\/arinote","title":"Ari's Notes","role":"collection"},"doc://AriNote/documentation/AriNote/Swift":{"identifier":"doc:\/\/AriNote\/documentation\/AriNote\/Swift","role":"collectionGroup","abstract":[{"type":"text","text":"언어 공부"}],"kind":"article","title":"Swift","url":"\/documentation\/arinote\/swift","type":"topic"},"https://developer.apple.com/documentation/swift/cocoa_design_patterns/using_key-value_observing_in_swift":{"title":"KVO","url":"https:\/\/developer.apple.com\/documentation\/swift\/cocoa_design_patterns\/using_key-value_observing_in_swift","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/cocoa_design_patterns\/using_key-value_observing_in_swift","type":"link","titleInlineContent":[{"text":"KVO","type":"text"}]},"https://github.com/leeari95/TIL/blob/main/2021-10/211012%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%2C%20Properties%2C%20KeyPath%2C%20KVC%2C%20iOS%2C%20HIG.md":{"title":"KVC","url":"https:\/\/github.com\/leeari95\/TIL\/blob\/main\/2021-10\/211012%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%2C%20Properties%2C%20KeyPath%2C%20KVC%2C%20iOS%2C%20HIG.md","identifier":"https:\/\/github.com\/leeari95\/TIL\/blob\/main\/2021-10\/211012%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%2C%20Properties%2C%20KeyPath%2C%20KVC%2C%20iOS%2C%20HIG.md","type":"link","titleInlineContent":[{"text":"KVC","type":"text"}]},"https://developer.apple.com/documentation/foundation/notificationcenter":{"title":"NotificationCenter","url":"https:\/\/developer.apple.com\/documentation\/foundation\/notificationcenter","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/notificationcenter","type":"link","titleInlineContent":[{"text":"NotificationCenter","type":"text"}]},"https://i.imgur.com/G0xAvnT.png":{"variants":[{"url":"https:\/\/i.imgur.com\/G0xAvnT.png","traits":["1x","light"]}],"alt":null,"type":"image","identifier":"https:\/\/i.imgur.com\/G0xAvnT.png"},"https://developer.apple.com/documentation/foundation/notification":{"title":"Notification","url":"https:\/\/developer.apple.com\/documentation\/foundation\/notification","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/notification","type":"link","titleInlineContent":[{"text":"Notification","type":"text"}]},"https://medium.com/@Alpaca_iOSStudy/delegation-notification-%EA%B7%B8%EB%A6%AC%EA%B3%A0-kvo-82de909bd29":{"title":"Blog - Delegation, Notification, 그리고 KVO","url":"https:\/\/medium.com\/@Alpaca_iOSStudy\/delegation-notification-%EA%B7%B8%EB%A6%AC%EA%B3%A0-kvo-82de909bd29","identifier":"https:\/\/medium.com\/@Alpaca_iOSStudy\/delegation-notification-%EA%B7%B8%EB%A6%AC%EA%B3%A0-kvo-82de909bd29","type":"link","titleInlineContent":[{"text":"Blog - Delegation, Notification, 그리고 KVO","type":"text"}]}}}