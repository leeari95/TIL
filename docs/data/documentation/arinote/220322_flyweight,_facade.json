{"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/AriNote\/documentation\/AriNote","doc:\/\/AriNote\/documentation\/AriNote\/Architecture"]]},"identifier":{"url":"doc:\/\/AriNote\/documentation\/AriNote\/220322_Flyweight,_Facade","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/arinote\/220322_flyweight,_facade"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"article","metadata":{"role":"article","modules":[{"name":"Ari's Notes"}],"title":"220322 Flyweight, Facade","roleHeading":"Article"},"primaryContentSections":[{"kind":"content","content":[{"level":1,"type":"heading","anchor":"TIL-Today-I-Learned","text":"TIL (Today I Learned)"},{"inlineContent":[{"type":"text","text":"3월 22일 (화)"}],"type":"paragraph"},{"anchor":"%ED%95%99%EC%8A%B5-%EB%82%B4%EC%9A%A9","type":"heading","level":2,"text":"학습 내용"},{"items":[{"content":[{"inlineContent":[{"text":"데코레이터 외에 나머지 패턴 공부","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":" "}]},{"text":"고민한 점 \/ 해결 방법","level":2,"type":"heading","anchor":"%EA%B3%A0%EB%AF%BC%ED%95%9C-%EC%A0%90--%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"[Flyweight Pattern]","type":"text"}],"type":"strong"}]},{"level":3,"anchor":"%ED%94%8C%EB%9D%BC%EC%9D%B4%EC%9B%A8%EC%9D%B4%ED%8A%B8-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80","text":"플라이웨이트 패턴이란?","type":"heading"},{"inlineContent":[{"type":"text","text":"메모리 사용량과 처리를 최소화하기 위한 디자인 패턴."},{"type":"text","text":" "},{"text":"각 객체의 모든 데이터를 유지하는 대신 여러 객체 간에 State 공통 부분을 공유하여 메모리에 더 많은 객체를 넣을 수 있는 구조적 디자인 패턴이다.","type":"text"}],"type":"paragraph"},{"level":3,"text":"구조","type":"heading","anchor":"%EA%B5%AC%EC%A1%B0"},{"inlineContent":[{"identifier":"https:\/\/i.imgur.com\/soFAOqg.png","type":"image"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Flyweight","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"공유할 수 있는 정보를 갖는 플라이웨이트 객체를 정의."}],"type":"paragraph"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"FlyweightFactory"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Flyweight 객체를 만들고 관리한다."}]}]},{"content":[{"inlineContent":[{"text":"Flyweight의 공유정보가 올바르게 공유되도록 한다.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"클라이언트가 Flyweight 객체를 요청하면 팩토리가 이전에 만들어 놓은 동일한 Flyweight 객체가 있는지 찾아보고 없다면 새로 생성한다."}]}]}],"type":"unorderedList"}]},{"content":[{"inlineContent":[{"type":"text","text":"Concreate Flyweight"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Flyweight 인터페이스를 구현하고 공유 상태에 대한 저장공간을 확보한다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"여기에 저장하는 상태들은 intrinsic state(고유한 상태)라고 한다."}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Unshared Concreate Flyweight (Context)","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"이 클래스는 Concrete Flyweight 객체를 자식으로 갖는다."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"모든 Flyweight 서브 클래스를 공유할 필요는 없다."}]}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Client","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"text":"Flyweight에 대한 참조를 유지한다.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Flyweight 객체의 각각의 상태를 처리하거나 저장한다.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]}]},{"level":3,"anchor":"%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C","type":"heading","text":"언제 사용할까?"},{"items":[{"content":[{"inlineContent":[{"text":"싱글톤을 사용하지만, 구성이 다른 여러개의 비슷한 공유 인스턴스가 필요할 때 사용한다.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","text":"장점","anchor":"%EC%9E%A5%EC%A0%90","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"앱에 유사한 인스턴스를 대량으로 만들어야할 때 메모리 절약 가능"}]}]}]},{"text":"단점","type":"heading","anchor":"%EB%8B%A8%EC%A0%90","level":3},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Flyweight Factory에서 인스턴스가 이미 존재하는지 확인하기 위한 데이터 검색을 수행하는 런타임 비용이 추가 발생"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"메모리 절약과 trade-off라서 어쩔 수 없긴 하지만 공유하는 인스턴스가 많아질 수록 런타임 비용이 커진다."}]}]}],"type":"unorderedList"}]},{"content":[{"inlineContent":[{"text":"코드가 복잡해질 수 있다.","type":"text"}],"type":"paragraph"}]}]},{"type":"thematicBreak"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"[Facade Pattern]"}]}],"type":"paragraph"},{"anchor":"%ED%8C%8C%EC%82%AC%EB%93%9C-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80","level":3,"text":"파사드 패턴이란?","type":"heading"},{"inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/lDHLA6g.png"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"라이브러리, 프레임워크, 혹은 복잡한 클래스들의 집합에 대한 단순화된 인터페이스를 제공하는 디자인패턴이다."},{"type":"text","text":" "},{"text":"하나의 시스템을 서브 시스템들의 조합으로 구성하면 복잡성을 줄이는데 도움이 된다.","type":"text"},{"text":" ","type":"text"},{"text":"이러한 설계의 목표는 서브 시스템 간 통신 및 종속성을 최소화하는 것인데, 이를 위한 방법으로 서브 시스템의 기능을 단순한 인터페이스를 제공하는 파사드 객체를 사용하는 것이다.","type":"text"}],"type":"paragraph"},{"text":"구조","type":"heading","level":3,"anchor":"%EA%B5%AC%EC%A1%B0"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"https:\/\/i.imgur.com\/TRWfVRB.png"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Facade"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"어떤 Subsystem 클래스가 클라이언트의 요청에 응답해야하는지 알고 있다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"클라이언트의 요청을 적절한 Subsystem에게 전달한다."}]}]}],"type":"unorderedList"}]},{"content":[{"inlineContent":[{"type":"text","text":"Subsystem"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Subsystem 기능을 구현한다."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Facade 객체에서 전달받은 요청을 처리한다."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"서브 시스템 클래스들은 Facade 객체의 존재를 모른다.","type":"text"}]}]}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Client"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"클라이언트는 서브 시스템 객체를 직접 호출하는 대신 Facade를 사용한다.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]}]},{"type":"heading","level":3,"text":"언제 사용할까?","anchor":"%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"서브 시스템을 계층화하고 싶을 때","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"복잡한 서브 시스템들을 간단하게 사용하기 위한 인터페이스를 만들고 싶을 때","type":"text"}]}]}]},{"text":"장점","type":"heading","anchor":"%EC%9E%A5%EC%A0%90","level":3},{"items":[{"content":[{"inlineContent":[{"text":"서브 시스템의 복잡성으로부터 코드를 분리할 수 있다.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"서브 시스템으로 부터 클라이언트를 보호하고 클라이언트가 서브 시스템을 사용하기 쉽게 만들어준다."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Facade를 사용하여 시스템과 객체 간 종속성을 계층화할 수 있다.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"컴파일 종속성을 줄여 서브 시스템이 변경될 때 컴파일 시간을 줄여준다."}]}]}],"type":"unorderedList"},{"level":3,"text":"단점","anchor":"%EB%8B%A8%EC%A0%90","type":"heading"},{"items":[{"content":[{"inlineContent":[{"text":"Facade 객체는 앱의 모든 클래스에 결합된 객체가 될 수도 있다.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"https:\/\/icksw.tistory.com\/246"},{"text":" ","type":"text"},{"text":"https:\/\/refactoring.guru\/design-patterns\/facade","type":"text"}],"type":"paragraph"},{"type":"thematicBreak"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"참고링크"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"https:\/\/icksw.tistory.com\/246","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"https:\/\/icksw.tistory.com\/247","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"https:\/\/refactoring.guru\/design-patterns\/facade"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"https:\/\/it-mesung.tistory.com\/183"}]}]}]}]}],"type":"unorderedList"}]}],"references":{"doc://AriNote/documentation/AriNote/Architecture":{"role":"collectionGroup","kind":"article","identifier":"doc:\/\/AriNote\/documentation\/AriNote\/Architecture","abstract":[{"text":"공부 많이해서 상황에 따라 적절한 아키텍처를 선택해보자.","type":"text"}],"title":"Architecture","type":"topic","url":"\/documentation\/arinote\/architecture"},"https://i.imgur.com/TRWfVRB.png":{"identifier":"https:\/\/i.imgur.com\/TRWfVRB.png","variants":[{"url":"https:\/\/i.imgur.com\/TRWfVRB.png","traits":["1x","light"]}],"alt":null,"type":"image"},"https://i.imgur.com/lDHLA6g.png":{"alt":null,"variants":[{"url":"https:\/\/i.imgur.com\/lDHLA6g.png","traits":["1x","light"]}],"type":"image","identifier":"https:\/\/i.imgur.com\/lDHLA6g.png"},"doc://AriNote/documentation/AriNote":{"kind":"symbol","type":"topic","identifier":"doc:\/\/AriNote\/documentation\/AriNote","abstract":[{"type":"codeVoice","code":"Today I Learned"}],"url":"\/documentation\/arinote","title":"Ari's Notes","role":"collection"},"https://i.imgur.com/soFAOqg.png":{"identifier":"https:\/\/i.imgur.com\/soFAOqg.png","variants":[{"url":"https:\/\/i.imgur.com\/soFAOqg.png","traits":["1x","light"]}],"alt":null,"type":"image"}}}