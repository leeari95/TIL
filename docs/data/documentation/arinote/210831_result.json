{"variants":[{"paths":["\/documentation\/arinote\/210831_result"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/AriNote\/documentation\/AriNote","doc:\/\/AriNote\/documentation\/AriNote\/Swift"]]},"kind":"article","sections":[],"metadata":{"roleHeading":"Article","modules":[{"name":"Ari's Notes"}],"title":"210831 Result","role":"article"},"primaryContentSections":[{"kind":"content","content":[{"text":"TIL (today i learned)","anchor":"TIL-today-i-learned","level":1,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"날짜: 2021년 8월 31일"},{"text":" ","type":"text"},{"type":"text","text":"작성자: 이아리"},{"type":"text","text":" "},{"type":"text","text":"태그: Result, 에러처리"}]},{"text":"학습내용","anchor":"%ED%95%99%EC%8A%B5%EB%82%B4%EC%9A%A9","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"갑자기 Result에 대해 알게되어 공부해보았는데,  이걸 왜 사용하는지 완벽히 이해하려면 공부가 좀 더 필요할 것 같다. 실제 API를 주고받을 때 자주 사용되는 에러 핸들링인 것 같다. 과제 코드에도 적용해보려고 했는데, 반환값이 Result라서, 혹은 Void라서 적용하기엔 적절치 못하다는 생각이 들었다. 내일은 새롭게 알게된 escaping 키워드와 비동기, 동기 관련한 키워드, 그리고 API가 정확히 무엇인지 상세한 공부를 해보면 좋을 것 같다."}]},{"text":"공부 내용 정리","level":2,"anchor":"%EA%B3%B5%EB%B6%80-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC","type":"heading"},{"anchor":"Result-%ED%83%80%EC%9E%85","level":2,"type":"heading","text":"Result 타입"},{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/result","isActive":true,"type":"reference"}]},{"type":"paragraph","inlineContent":[{"text":"작업 중에는 실패할 수 있는 작업이 있는데, 디스크에 파일을 쓰거나, API를 호출하여 네트워크를 통해 데이터를 가져온다거나, 특정 URL에 있는 데이터를 불러오는 작업이 이 경우에 해당된다. 이런 실패 가능한 작업을 처리하기 위해 Swift에서는 do, try, catch문을 사용했었다.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"이 방법은 에러를 런타임에 동기로 자동으로 처리할 수 있게 해주었지만 이 방법으로는 발생가능한 여러가지 예외 상황에 대처하기 어려운 단점이 있다. Swift 5 에서는 이런 점을 보완하여 에러를 보다 유연하게 처리할 수 있는 Result<Value, Error>문법을 지원하게 되었다.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"성공과 실패에 대한 결과값을 반환하고 싶은 경우에 사용한다. 특히 비동기 API에서의 결과처리에 대한 복잡함을 간단하고 명확하게 만들어주고 쉽게 에러를 핸들링할 수 있도록 해준다."}]},{"type":"paragraph","inlineContent":[{"text":"Result 타입은 enum이며 두 개의 제네릭한 결과를 리턴하는 것이다. Failure 제네릭은 Error를 채택한 타입이여야 한다.","type":"text"}]},{"syntax":"swift","code":["@frozen public enum Result<Success, Failure> where Failure : Error {","","    \/\/\/ A success, storing a `Success` value.","    case success(Success)","","    \/\/\/ A failure, storing a `Failure` value.","    case failure(Failure)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"예제로 이메일 형식을 검사하는 방법을 만들어보자."}]},{"inlineContent":[{"type":"text","text":"먼저 필수적으로 실패했을 경우의 타입을 정의해야한다."}],"type":"paragraph"},{"code":["enum EmailValidationError: Error {","    case cannotBeEmpty","    case invalid","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이후 Result 타입을 반환하는 함수를 정의한다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"에러는 다음과 같이 정의한다."}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"문자열이 비어있는지?"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"정규식을 통하여 이메일 형식이 맞는지?"}]}]}],"type":"unorderedList"},{"type":"codeListing","code":["func validate(_ email: String?) -> Result<String, EmailValidationError> {","    let regex = #\"([0-9a-zA-Z_-]+)@([0-9a-zA-Z_-]+)(\\.[0-9a-zA-Z_-]+){1,2}\"#","    ","    guard let email = email else {","        return .failure(.cannotBeEmpty)","    }","    ","    guard  let range = email.range(of: regex, options: [.regularExpression]), (range.lowerBound, range.upperBound) == (email.startIndex, email.endIndex) else {","        return .failure(.invalid)","    }","    ","    return .success(email)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"그런 다음 이메일 형식이 맞다면 이메일을 저장해주는 함수를 생성한다.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["func saveClicked(_ text: String?) {","    switch validate(text) {","    case .success(let email):","        emailSuccess = email","        print(\"이메일 저장에 성공하였습니다.\")","    case .failure(.cannotBeEmpty):","        print(\"이메일 주소는 비워둘 수 없습니다.\")","    case .failure(.invalid):","        print(\"이메일 주소 형식이 아닙니다. 다시 입력해주세요.\")","    }","}"]},{"inlineContent":[{"type":"text","text":"위와 같이 스위치문을 이용하여 두가지 케이스로 나누어 활용할 수도 있고,"}],"type":"paragraph"},{"syntax":"swift","code":["func saveClicked(_ text: String?) {","    do {","        let email = try validate(text).get()","        emailSuccess = email","        print(\"이메일 저장에 성공하였습니다.\")","    } catch let error as EmailValidationError {","        switch error {","        case .cannotBeEmpty:","            print(\"이메일 주소는 비워둘 수 없습니다.\")","        case .invalid:","            print(\"이메일 주소 형식이 아닙니다. 다시 입력해주세요.\")","        }","    } catch {","        print(\"문제가 발생하였습니다.\")","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"do try catch문을 사용하여 구현할 수도 있다."}]},{"inlineContent":[{"type":"text","text":"Result 타입에는 get()메서드가 있다. 이 메서드는 성공한 값이 있으면 반환하고, 그렇지 않으면 에러를 throw 한다. get()메서드를 사용한 Result 타입 사용을 다음과 같이 예외 던지기로 변환할 수 있다."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"아래 예제는 실제로 서버에 연결하지는 않지만 completion 핸들러를 사용하여 비동기 코드를 시뮬레이션 할 수 있다."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func validate(_ email: String?, completion: @escaping (Result<String, EmailValidationError>) -> Void) {","    let regex = #\"([0-9a-zA-Z_-]+)@([0-9a-zA-Z_-]+)(\\.[0-9a-zA-Z_-]+){1,2}\"#","    ","    guard let email = email else {","        return completion(.failure(.cannotBeEmpty))","    }","    ","    guard  let range = email.range(of: regex, options: [.regularExpression]), (range.lowerBound, range.upperBound) == (email.startIndex, email.endIndex) else {","        return completion(.failure(.invalid))","    }","    ","    return completion(.success(email))","}","","validate(\"lee_ari95@icloud.com\") { result in","    switch result {","        case .success(let email):","            emailSuccess = email","            print(\"이메일 저장에 성공하였습니다.\")","        case .failure(.cannotBeEmpty):","            print(\"이메일 주소는 비워둘 수 없습니다.\")","        case .failure(.invalid):","            print(\"이메일 주소 형식이 아닙니다. 다시 입력해주세요.\")","        }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그리고 Git을 다룰줄 몰라서 엘리의 유튜브 git 기초영상을 봤다가 강의까지 질러버렸다.. 열심히 해야지…!"}]},{"inlineContent":[{"identifier":"https:\/\/github.com\/user-attachments\/assets\/bac3603f-2022-494c-b0dc-82659e8cc187","type":"image"}],"type":"paragraph"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/AriNote\/documentation\/AriNote\/210831_Result"},"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://AriNote/documentation/AriNote":{"kind":"symbol","type":"topic","identifier":"doc:\/\/AriNote\/documentation\/AriNote","abstract":[{"type":"codeVoice","code":"Today I Learned"}],"url":"\/documentation\/arinote","title":"Ari's Notes","role":"collection"},"https://github.com/user-attachments/assets/bac3603f-2022-494c-b0dc-82659e8cc187":{"identifier":"https:\/\/github.com\/user-attachments\/assets\/bac3603f-2022-494c-b0dc-82659e8cc187","variants":[{"url":"https:\/\/github.com\/user-attachments\/assets\/bac3603f-2022-494c-b0dc-82659e8cc187","traits":["1x","light"]}],"alt":"36","type":"image"},"doc://AriNote/documentation/AriNote/Swift":{"identifier":"doc:\/\/AriNote\/documentation\/AriNote\/Swift","role":"collectionGroup","abstract":[{"type":"text","text":"언어 공부"}],"kind":"article","title":"Swift","url":"\/documentation\/arinote\/swift","type":"topic"},"https://developer.apple.com/documentation/swift/result":{"type":"link","title":"https:\/\/developer.apple.com\/documentation\/swift\/result","url":"https:\/\/developer.apple.com\/documentation\/swift\/result","titleInlineContent":[{"text":"https:\/\/developer.apple.com\/documentation\/swift\/result","type":"text"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/result"}}}